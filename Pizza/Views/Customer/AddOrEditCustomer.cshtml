@model Pizza.DTO.CustomerDTO
@{
    ViewBag.Title = "Index";
}
<style>
    .top33 {
        top: 33% !important;
    }

    .has-error {
        border-color: #d68273 !important;
    }

    em.has-error, span.has-error {
        color: #d68273 !important;
        font-style: normal !important;
    }

    span.has-error {
        margin-left: 27% !important;
    }
</style>
<link href="~/Content/Swal/sweetalert.css" rel="stylesheet" />
<section id="content_wrapper">
    <div id="content" style="margin-top: 60px;">
        <div class="panel-heading">
            <div class="panel-title hidden-xs dheadings">
                @if (Model.Custormer_UID > 0)
                {
                    <span>Update Customer</span>
                }
                else
                {
                    <span>Create Customer</span>
                }

            </div>

        </div>
        <div class="row">
            <form method="post" action="/" class="form-horizontal" role="form" id="Cus-Form">
                <div class="col-md-12">
                    <div class="panel">

                        <div class="panel-body">

                            @Html.HiddenFor(m => m.CustormerUID, new { @id = "txtCustormerID", @autocomplete = "off", @class = "form-control txtCustormerID", @name = "txtCustormerID " })
                            <div class="form-group">
                                <label for="inputStandard" class="col-lg-3 control-label">Name</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.TextBoxFor(m => m.Name, new { @id = "txtName", @autocomplete = "off", @class = "form-control txtName", @name = "txtName ", @placeholder = "Enter Name", @maxlength = "50" })
                                    </div>
                                </div>
                            </div>


                            <div class="form-group">
                                <label for="inputStandard" class="col-lg-3 control-label">Phone Number</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.TextBoxFor(m => m.PhoneNumber, new { @id = "txtPhone", @autocomplete = "off", @class = "form-control txtPhone", @name = "txtPhone", @placeholder = "Enter Phone Number", @maxlength = "15" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="inputStandard" class="col-lg-3 control-label">Address1</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.TextBoxFor(m => m.Address1, new { @id = "txtAddress1", @autocomplete = "off", @class = "form-control txtAddress1", @name = "txtAddress1", @placeholder = "Enter Address1", @maxlength = "100" })
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="inputStandard" class="col-lg-3 control-label">Address2</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.TextBoxFor(m => m.Address2, new { @id = "txtAddress2", @autocomplete = "off", @class = "form-control txtAddress2", @name = "txtAddress2", @placeholder = "Enter Address2", @maxlength = "100" })
                                    </div>
                                </div>

                            </div>

                            <div class="form-group">
                                <label for="inputStandard" class="col-lg-3 control-label">City</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.TextBoxFor(m => m.City, new { @id = "txtCity", @autocomplete = "off", @class = "form-control txtCity", @name = "txtCity", @placeholder = "Enter City", @maxlength = "20" })
                                    </div>
                                </div>
                            </div>


                            <div class="form-group">
                                <label for="inputStandard" class="col-lg-3 control-label">Email</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.TextBoxFor(m => m.State, new { @id = "txtState", @autocomplete = "off", @class = "form-control txtState", @name = "txtState", @placeholder = "Enter State", @maxlength = "2" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="inputStandard" class="col-lg-3 control-label">Zip</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.TextBoxFor(m => m.Zip, new { @id = "txtZip", @autocomplete = "off", @class = "form-control txtZip", @name = "txtZip", @placeholder = "Enter Zip", @maxlength = "9" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="inputSelect" class="col-lg-3 control-label">Employee</label>
                                <div class="col-lg-8">
                                    <div class="bs-component">
                                        @Html.DropDownListFor(m => m.EmployeeID, (IEnumerable<SelectListItem>)ViewBag.Employees, new { @id = "ddlEmployee", @name = "ddlEmployee", @class = "form-control ddlEmployee" })
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="pull-right marginbtm10">
                        <button id="btnSave" type="submit" class="button btn-primary mr10 defaultbtn cus-cursor-pointer">

                            @if (Model.Custormer_UID > 0)
                            {
                                <span>Update</span>
                            }
                            else
                            {
                                <span>Save</span>
                            }

                        </button>
                        @if (Model.Custormer_UID <= 0)
                        {
                            <button type="submit" class="button btn-primary mr10 defaultbtn canclebtn cus-cursor-pointer">Cancel</button>
                        }
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>


<!-- jQuery Validate Plugin-->

<script src="~/Content/assets/admin-tools/admin-forms/JS/jquery.validate.min.js"></script>

<!-- jQuery Validate Addon -->

<script src="~/Content/assets/admin-tools/admin-forms/JS/additional-methods.min.js"></script>

<script src="@Url.Content("~/Content/Swal/sweetalert.min.js")"></script>



<script>
    var apiUrl = '@System.Configuration.ConfigurationManager.AppSettings["InternalUrl"]';

    var AddOrEditCustomerURL = '@Url.Action("SaveOrUpdateCustomer", "Customer")';

    var ValidatePhoneURL = '@Url.Action("VaidatePhoneNumber", "Customer")';

    var EmployeeID = '@Model.EmployeeID';

    var Custormer_UID = '@Model.Custormer_UID';

    $(document).ready(function () {


        if (EmployeeID > 0) {
            $("#ddlEmployee").val(EmployeeID);
        }
        else {
            $("#ddlEmployee").val('');
        }

        Core.init();

        // Init Demo JS
        Demo.init();

        // Init Boostrap Multiselects


        $.validator.methods.smartCaptcha = function (value, element, param) {
            return value == param;
        };

        $("#Cus-Form").validate({
            errorClass: "has-error",
            validClass: "state-success",
            errorElement: "em",

            rules: {
                Name: {
                    required: true,

                },
                PhoneNumber: {
                    required: true,
                    NameUniqe: true
                },
                Address1: {
                    required: true,
                },
                Address2: {
                    required: true
                },
                City: {
                    required: true
                },

                State: {
                    required: true
                },
                Zip: {
                    required: true,
                },
                EmployeeID: {
                    required: true,
                }
            },

            messages: {
                Name: {
                    required: 'Enter Name'
                },
                PhoneNumber: {
                    required: 'Enter Phone Number',
                },
                Address1: {
                    required: 'Enter Address1',
                },
                Address2: {
                    required: 'Select Address2'
                },
                City: {
                    required: 'Enter City'
                },
                State: {
                    required: 'Enter State',
                },
                Zip: {
                    required: 'Enter Zip'
                },
                EmployeeID: {
                    required: 'Select Employee'
                },
            },

            highlight: function (element, errorClass, validClass) {
                $(element).addClass(errorClass).removeClass(validClass);
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass(errorClass).addClass(validClass);
            },
            errorPlacement: function (error, element) {

                if (element.is(":radio") || element.is(":checkbox")) {
                    element.closest('.option-group').after(error);
                } else {
                    error.insertAfter(element.parent());
                }
            },
            submitHandler: function (form) {

                SaveOrEditCustomer();
            }

        });

        jQuery.validator.addMethod("NameUniqe", function (value, element) {
            return ValidateCustomerPhone();
        }, 'Phone Number should be unique.');

    });

    $(".txtPhone").keypress(function (e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            $("#errmsg").html("Digits Only").show().fadeOut("slow");
            return false;
        }
    });


    function SaveOrEditCustomer() {
        debugger;
        var ConfirmationMsg = '';
        if (Custormer_UID > 0) {
            ConfirmationMsg = "You want to update Customer!";
        }
        else {
            ConfirmationMsg = "You want to save Customer!";
        }
        var UserData = JSON.stringify({
            "Custormer_UID": $('#txtCustormerID').val(),
            "Name": $("#txtName").val(),
            "PhoneNumber": $("#txtPhone").val(),
            "Address1": $("#txtAddress1").val(),
            "Address2": $("#txtAddress2").val(),
            "City": $("#txtCity").val(),
            "State": $("#txtState").val(),
            "Zip": $("#txtZip").val(),
            "EmployeeId": $("#ddlEmployee").val()
        });
        swal({
            title: "Are you sure?",
            text: ConfirmationMsg,
            type: "warning",
            showCancelButton: true,
            //confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            closeOnConfirm: true,
            closeOnCancel: true
        },
    function (isConfirm) {
        if (isConfirm) {
            $(".loadingmodal").show();
            $.ajax({
                type: "POST",
                url: AddOrEditCustomerURL,
                data: UserData,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {

                    if (result.Status) {
                        ShowSuccessMessage(result.Message, "Customer/index");
                    }
                    else {
                        ShowErrorMessage(result.Message);
                    }
                },
                error: function () {
                }
            });
        }
    })
    };



    $(".txtPhone").blur(function () {
        if ($("#txtPhone").val() == '' || $("#txtPhone").val() == null || $("#txtPhone").val() == undefined) {
            return;
        }
        ValidateCustomerPhone();
    });

    function ValidateCustomerPhone() {
        debugger;
        var status = false;
        var UserName = JSON.stringify({
            "PhoneNumber": $("#txtPhone").val(),
            "CustomerID": '@Model.CustormerUID'
        });

        $.ajax({
            type: "POST",
            url: ValidatePhoneURL,
            data: UserName,
            async: false,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                status = result.Status;
                $(".loadingmodal").hide();
            },
            error: function () {
                $(".loadingmodal").hide();
            }
        });
        return status;
    }


    $('.canclebtn').on("click", function () {
        $("#txtName").val('');
        $("#txtPhone").val('');
        $("#txtAddress1").val('');
        $("#txtAddress2").val('');
        $("#txtCity").val('');
        $("#txtState").val('');
        $("#txtZip").val('');
        $("#ddlEmployee").val('');
        $('#txtCustormerID').val('');
    });


    function IsEmailValid(email) {
        var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        return regex.test(email);
    }

    $(".txtPhone").keypress(function (e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            $("#errmsg").html("Digits Only").show().fadeOut("slow");
            return false;
        }
    });

    function ShowSuccessMessage(message, path) {
        swal({
            title: "",
            text: message,
            type: "success"
        }, function () {
            window.location.href = apiUrl + path;
        });
    }

    function ShowErrorMessage(message) {
        swal({
            title: "",
            text: message,
            type: "error"
        });
    }
</script>